/*Easy */
/* Q1: Who is the senior most employee based on job title? */

select * from employee;
select *
from employee
order by levels desc
limit 1;

/* Q2: Which countries have the most Invoices? */

	select * from invoice;
	select count(*) as bill_count, billing_country
	from invoice
	group by billing_country
	order by bill_count desc;

/* Q3: What are top 3 values of total invoice? */

	SELECT ROUND(cast(total as numeric), 2) AS top_3_invoice_total
	FROM invoice
	ORDER BY total DESC
	LIMIT 3;

/* Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals */

	select * from invoice;
	select billing_city, sum(total) as sum_of_inv_per_city
	from invoice
	group by billing_city
	order by sum_of_inv_per_city desc
	limit 1;

/* Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.*/

	select * from invoice;
	select * from customer;
	select customer.customer_id, customer.first_name, customer.last_name, sum(invoice.total) as invoicetotal
	from customer
	join invoice
	on customer.customer_id = invoice.customer_id
	group by customer.customer_id
	order by invoicetotal desc
	limit 1;

/*Moderate */

/* Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A. */

	select * from customer;
	select * from genre;
	select  distinct customer.customer_id, customer.first_name, customer.last_name, customer.email
	from customer
	join invoice on customer.customer_id = invoice.customer_id
	join invoice_line on invoice_line.invoice_id = invoice.invoice_id
	where track_id in (
			select track.track_id
			from track
			join genre on genre.genre_id = track.genre_id
			where genre.name like 'Rock'
					)
	order by customer.email;

	/* Method 2 */

	SELECT DISTINCT email AS Email,first_name AS FirstName, last_name AS LastName, genre.name AS Name
	FROM customer
	JOIN invoice ON invoice.customer_id = customer.customer_id
	JOIN invoiceline ON invoiceline.invoice_id = invoice.invoice_id
	JOIN track ON track.track_id = invoiceline.track_id
	JOIN genre ON genre.genre_id = track.genre_id
	WHERE genre.name LIKE 'Rock'
	ORDER BY email;
	
/* Q2: Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands. */

	select * from genre;
	select * from artist;

	select artist.artist_id, artist.name, count(artist.artist_id) as track_count
	from artist
	join album on album.artist_id = artist.artist_id
	join track on track.album_id = album.album_id
	join genre on genre.genre_id = track.genre_id
	where genre.name like 'Rock'
	group by artist.artist_id ,artist.name
	order by track_count desc
	limit 10;

/* Q3: Return all the track names that have a song length longer than the average song length. 
Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first. */

	select * from track;
	select track.name, milliseconds
	from track
	where milliseconds > (select avg(milliseconds)
						from track
						)
	order by milliseconds desc;
	
/*Advance */

/* Q1: Find how much amount spent by each customer on artists?
 Write a query to return customer name, artist name and total spent */
 
	select * from invoice_line;
	select * from customer;
	select customer.customer_id, customer.first_name, customer.last_name, artist.artist_id, artist.name,
			sum(invoice_line.unit_price* invoice_line.quantity) as sales_per_cust
	from customer
	join invoice on invoice.customer_id = customer.customer_id
	join invoice_line on invoice_line.invoice_id = invoice.invoice_id
	join track on track.track_id = invoice_line.track_id
	join album on album.album_id = track.album_id
	join artist on artist.artist_id = album.artist_id
	group by 1,2,3,4,5
	order by sales_per_cust desc;

/* Q2: We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre 
with the highest amount of purchases. Write a query that returns each country along with the top Genre. For countries where 
the maximum number of purchases is shared return all Genres. */


	select * from track;
	with cte as (
			select customer.country, genre.name as genre_name,
					count(invoice_line.quantity) as purchases,
					row_number() over(partition by customer.country order by count(invoice_line.quantity) desc) as rn
			from customer 
			join invoice on invoice.customer_id = customer.customer_id
			join invoice_line on invoice_line.invoice_id = invoice.invoice_id
			join track on invoice_line.track_id = track.track_id
			join genre on genre.genre_id = track.genre_id
			group by customer.country, genre.name
			order by customer.country
	)
	select cte.country, cte.genre_name, cte.purchases from cte where rn<=1;
	
/* Q3: Write a query that determines the customer that has spent the most on music for each country. 
Write a query that returns the country along with the top customer and how much they spent. 
For countries where the top amount spent is shared, provide all customers who spent this amount. */

	with cte as (
				select customer.customer_id, customer.first_name, customer.last_name, customer.country,
						sum(total) as invoice_total,
						row_number() over(partition by country order by sum(total) desc) as rn
				from customer
				join invoice on customer.customer_id = invoice.customer_id
				group by 1,2,3,4
	)
	select customer_id, first_name, last_name, country, invoice_total from cte where rn<=1;